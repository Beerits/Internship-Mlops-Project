# name: Deploy to AWS EC2
 
# on:
#   push:
#     branches:
#       - main  # Trigger the workflow when pushing to the main branch
 
# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3
 
#     - name: Set up Node.js (If using Node.js)
#       uses: actions/setup-node@v3
#       with:
#         node-version: '16'
 
#     - name: Install dependencies
#       run: npm install  # Adapt this to your project
 
#     - name: Run tests (Optional)
#       run: npm test  # Adapt this to your project
 
#     - name: Deploy to EC2 via SSH
#       uses: appleboy/ssh-action@v0.1.6
#       with:
#         host: ${{ secrets.AWS_EC2_HOST }}  # Add this to your GitHub Secrets
#         username: ${{ secrets.AWS_EC2_USER }}  # Add this to your GitHub Secrets
#         key: ${{ secrets.AWS_EC2_KEY }}  # Add your SSH private key to GitHub Secrets
#         script: |
#           cd C:\Users\LENOVO\OneDrive\Desktop\Miraffra\Internship-Mlops-Project
#           git pull origin main
#           npm install -r requirements.txt # Adapt this to your project
#           pm2 restart all  # Restart your Node.js app, if using PM2


name: Deploy to AWS EC2

on:
  push:
    branches:
      - main  # Trigger on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from GitHub repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python and install dependencies from requirements.txt
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Set up Python environment
        run: |
         sudo apt-get update
         sudo apt-get install -y python3-distutils    

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 3: Set up Docker and AWS CLI
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set region $AWS_REGION
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_LOGIN_URI }}

      # Step 4: Build and push the Docker image to ECR
      - name: Build, tag, and push image to ECR
        env:
          ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
          AWS_ECR_LOGIN_URI: ${{ secrets.AWS_ECR_LOGIN_URI }}
        run: |
          IMAGE_TAG=latest  # or set a custom tag
          docker build -t $ECR_REPOSITORY_NAME:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY_NAME:$IMAGE_TAG $AWS_ECR_LOGIN_URI/$ECR_REPOSITORY_NAME:$IMAGE_TAG
          docker push $AWS_ECR_LOGIN_URI/$ECR_REPOSITORY_NAME:$IMAGE_TAG

      # Step 5: Deploy Docker container to AWS EC2 (via SSH)
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          script: |
            docker pull $AWS_ECR_LOGIN_URI/$ECR_REPOSITORY_NAME:$IMAGE_TAG
            docker stop internship-mlops-project || true
            docker rm internship-mlops-project || true
            docker run -d --name internship-mlops-project -p 80:80 $AWS_ECR_LOGIN_URI/$ECR_REPOSITORY_NAME:$IMAGE_TAG

